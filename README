*********************** Unit-Value version 0.1.0a ***********************

Welcome to Unit-Value

Unit-Value is an attempt to make a unit type that will maintain measured units across the most common arithmetic operations such as multiplication, division, addition, and subtraction.  In the case of addition and subtraction it will combine like unit combinations and in the case of dissimilar unit combinations it will create and manage the resulting polynomials.  In addition to the Unit-Value type, I wanted something that would easily convert between units from the same measurement type, i.e. cm to ft.  In this vein Unit-Value already contains conversions for many of the frequency, relative power, time, distance, temperature, current, volume, mass, force, pressure, energy, and power units

Enjoy.	

Usage:

To create a UValue class one passes the double value along with the explicit allocation of the desired unit class.  In this example I allocate via 'new' the DistanceUnit class.  The unit class object is managed and deleted by the UValue object.  

UValue aUnitValue(0, new DistanceUnit("m"));

To convert between allowable units in a single unit class simply use the square brackets and a character string of the desired unit's symbol.

UValue aUnitValue(1, new DistanceUnit("m"));

UValue newUnitValue = aUnitValue["cm"];

cout << "New Unit: " << newUnitValue << endl;
cout << "Old Unit: " << aUnitValue << endl;

-- OUTPUT -- 

New Unit: 100 cm
Old Unit: 1 m

The unit symbols are case sensitive.  And no accounting is made for whitespaces before or after the symbol.  So be sure of your unit strings.

Outupt of the unit value is done by either the << symbol or by using the print method. 
